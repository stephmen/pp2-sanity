{"version":3,"file":"index.esm.js","sources":["../src/use-router.tsx","../node_modules/style-inject/dist/style-inject.es.js","../src/bulk-actions-menu/index.tsx","../src/create-emitter.ts","../src/client.ts","../src/use-paginated-client.ts","../src/column-selector/index.tsx","../src/block-content-to-string.ts","../src/cell/index.tsx","../src/create-super-pane.tsx"],"sourcesContent":["import React, { createContext, useContext } from 'react';\n\nconst RouterContext = createContext<any>(null);\n\n// https://github.com/sanity-io/demo-custom-workflow/blob/d00b0f73fbf8543724772802749bd846078075d6/app/lib/router/internalRouterContextTypeCheck.js#L1\nfunction internalRouterContextTypeCheck(\n  context: any,\n  propName: any,\n  componentName: any,\n) {\n  if (!context.__internalRouter) {\n    throw new Error(\n      'The router is accessed outside the context of a <RouterProvider>.' +\n        ' No router state will be accessible and links will not go anywhere. To fix this,' +\n        ` make sure ${componentName} is rendered in the context of a <RouterProvider /> element`,\n    );\n  }\n}\n\n// https://github.com/sanity-io/demo-custom-workflow/blob/d00b0f73fbf8543724772802749bd846078075d6/app/lib/router/provider.js\nexport class RouterProvider extends React.Component {\n  static contextTypes = {\n    __internalRouter: internalRouterContextTypeCheck,\n  };\n\n  render() {\n    const router = this.context.__internalRouter;\n\n    return (\n      <RouterContext.Provider value={router}>\n        {this.props.children}\n      </RouterContext.Provider>\n    );\n  }\n}\n\nfunction useRouter() {\n  return useContext(RouterContext);\n}\n\nexport default useRouter;\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import React, { useState, useMemo } from 'react';\nimport { nanoid } from 'nanoid';\nimport {\n  Menu,\n  MenuItem,\n  MenuDivider,\n  Dialog,\n  Button,\n  MenuButton,\n  Label,\n  useToast,\n} from '@sanity/ui';\nimport {\n  ResetIcon,\n  UnpublishIcon,\n  PublishIcon,\n  TrashIcon,\n} from '@sanity/icons';\nimport schema from 'part:@sanity/base/schema';\nimport SanityPreview from 'part:@sanity/base/preview';\nimport styles from './styles.module.css';\nimport _client from 'part:@sanity/base/client';\nimport { ErrorBoundary } from 'react-error-boundary';\nconst client = _client as import('@sanity/client').SanityClient;\n\ninterface Props {\n  className?: string;\n  typeName: string;\n  selectedIds: Set<string>;\n}\n\nconst ErroredDocuments = ({ e, schemaType }: { e: any; schemaType: any }) => {\n  const idsWithErrors: string[] =\n    'details' in e ? e.details.items.map((item: any) => item.error.id) : [];\n\n  if (!idsWithErrors.length) {\n    return null;\n  }\n\n  const plural = idsWithErrors.length !== 1;\n\n  return (\n    <ErrorBoundary fallback={null}>\n      <p>\n        Please unselect {plural ? 'these' : 'this'} document{plural ? 's' : ''}{' '}\n        and try again:\n      </p>\n      <p>\n        {idsWithErrors.map((id) => (\n          <SanityPreview\n            type={schemaType}\n            key={id}\n            value={{ _id: id, _type: 'movie' }}\n          />\n        ))}\n      </p>\n    </ErrorBoundary>\n  );\n};\n\nconst removeDraftPrefix = (s: string) =>\n  s.startsWith('drafts.') ? s.substring('drafts.'.length) : s;\n\nfunction BulkActionsMenu({ className, selectedIds, typeName }: Props) {\n  const buttonId = useMemo(nanoid, []);\n  const schemaType = useMemo(() => schema.get(typeName), [typeName]);\n  const toast = useToast();\n  const dialogId = useMemo(nanoid, []);\n  const [dialogMode, setDialogMode] = useState<\n    'discard_changes' | 'unpublish' | 'publish' | 'delete' | null\n  >(null);\n  const [loading, setLoading] = useState(false);\n\n  const handleDiscardChanges = async () => {\n    setLoading(true);\n\n    try {\n      const ids = await client.fetch<string[]>('*[_id in $ids]._id', {\n        ids: Array.from(selectedIds)\n          .map((id) => [id, `drafts.${id}`])\n          .flat(),\n      });\n\n      const idSet = ids.reduce((set, id) => {\n        set.add(id);\n        return set;\n      }, new Set<string>());\n\n      const draftIdsThatAlsoHavePublishedIds = ids.filter(\n        (id) =>\n          id.startsWith('drafts.') && idSet.has(id.substring('drafts.'.length)),\n      );\n\n      const t = client.transaction();\n\n      for (const id of draftIdsThatAlsoHavePublishedIds) {\n        t.delete(id);\n      }\n\n      await t.commit();\n      setDialogMode(null);\n    } catch (e) {\n      console.warn(e);\n\n      toast.push({\n        title: 'Error Bulk Discarding Changes',\n        description: (\n          <>\n            <p>The bulk discard changes failed.</p>\n\n            <ErroredDocuments e={e} schemaType={schemaType} />\n          </>\n        ),\n        status: 'error',\n        closable: true,\n        duration: 30 * 1000,\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleUnpublish = async () => {\n    setLoading(true);\n\n    try {\n      const publishedDocuments = await client.fetch<any[]>('*[_id in $ids]', {\n        ids: Array.from(selectedIds),\n      });\n\n      const t = client.transaction();\n\n      for (const publishedDocument of publishedDocuments) {\n        t.createIfNotExists({\n          ...publishedDocument,\n          _id: `drafts.${publishedDocument._id}`,\n          _updatedAt: new Date().toISOString(),\n        });\n        t.delete(publishedDocument._id);\n      }\n\n      await t.commit();\n    } catch (e) {\n      console.warn(e);\n\n      toast.push({\n        title: 'Error Bulk Unpublishing',\n        description: (\n          <>\n            <p>\n              The bulk unpublished failed. This usually occurs because there are\n              other documents referencing the documents you’re trying to\n              unpublish.\n            </p>\n\n            <ErroredDocuments e={e} schemaType={schemaType} />\n          </>\n        ),\n        status: 'error',\n        closable: true,\n        duration: 30 * 1000,\n      });\n    } finally {\n      setDialogMode(null);\n      setLoading(false);\n    }\n  };\n\n  const handlePublish = async () => {\n    setLoading(true);\n\n    try {\n      const draftDocuments = await client.fetch<any[]>('*[_id in $ids]', {\n        ids: Array.from(selectedIds).map((id) => `drafts.${id}`),\n      });\n\n      const t = client.transaction();\n\n      for (const draftDocument of draftDocuments) {\n        t.createOrReplace({\n          ...draftDocument,\n          _id: removeDraftPrefix(draftDocument._id),\n          _updatedAt: new Date().toISOString(),\n        });\n        t.delete(draftDocument._id);\n      }\n\n      await t.commit();\n    } catch (e) {\n      console.warn(e);\n\n      toast.push({\n        title: 'Error Bulk Publishing',\n        description: (\n          <>\n            <p>The bulk publish failed.</p>\n\n            <ErroredDocuments e={e} schemaType={schemaType} />\n          </>\n        ),\n        status: 'error',\n        closable: true,\n        duration: 30 * 1000,\n      });\n    } finally {\n      setDialogMode(null);\n      setLoading(false);\n    }\n  };\n\n  const handleDelete = async () => {\n    setLoading(true);\n\n    try {\n      const idsToDelete = await client.fetch<string[]>('*[_id in $ids]._id', {\n        ids: Array.from(selectedIds)\n          .map((id) => [id, `drafts.${id}`])\n          .flat(),\n      });\n\n      const t = client.transaction();\n\n      for (const id of idsToDelete) {\n        t.delete(id);\n      }\n\n      await t.commit();\n    } catch (e) {\n      console.warn(e);\n\n      toast.push({\n        title: 'Error Bulk Deleting',\n        description: (\n          <>\n            <p>\n              The bulk delete failed. This usually occurs because there are\n              other documents referencing the documents you’re trying to\n              delete.\n            </p>\n\n            <ErroredDocuments e={e} schemaType={schemaType} />\n          </>\n        ),\n        status: 'error',\n        closable: true,\n        duration: 30 * 1000,\n      });\n    } finally {\n      setDialogMode(null);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <>\n      <MenuButton\n        button={\n          <button className={className}>\n            <Label>Bulk Actions</Label>\n          </button>\n        }\n        portal\n        id={buttonId}\n        menu={\n          <Menu style={{ textAlign: 'left' }}>\n            {/* TODO: */}\n            {/* <MenuItem className=\"prevent-nav\" text=\"Bulk Edit\" icon={EditIcon} /> */}\n            {/* <MenuDivider /> */}\n            {/* <MenuItem className=\"prevent-nav\" text=\"Export\" icon={DownloadIcon} /> */}\n            <MenuItem\n              className=\"prevent-nav\"\n              text=\"Discard changes\"\n              icon={ResetIcon}\n              onClick={() => setDialogMode('discard_changes')}\n            />\n            <MenuItem\n              className=\"prevent-nav\"\n              text=\"Unpublish\"\n              icon={UnpublishIcon}\n              onClick={() => setDialogMode('unpublish')}\n            />\n            <MenuItem\n              className=\"prevent-nav\"\n              text=\"Publish\"\n              icon={PublishIcon}\n              onClick={() => setDialogMode('publish')}\n            />\n            <MenuDivider />\n            <MenuItem\n              className=\"prevent-nav\"\n              tone=\"critical\"\n              icon={TrashIcon}\n              text=\"Delete\"\n              onClick={() => setDialogMode('delete')}\n            />\n          </Menu>\n        }\n        placement=\"bottom\"\n      />\n\n      {dialogMode === 'discard_changes' && (\n        <Dialog\n          id={dialogId}\n          header={<>Discard Changes</>}\n          zOffset={100000}\n          footer={\n            <div className={styles.footer}>\n              <Button\n                text=\"Cancel\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={() => setDialogMode(null)}\n              />\n              <Button\n                text=\"Discard Changes\"\n                tone=\"critical\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={handleDiscardChanges}\n              />\n            </div>\n          }\n          onClose={() => setDialogMode(null)}\n        >\n          <div className={styles.content}>\n            <p>\n              Are you sure you want to discard changes to{' '}\n              <strong>{selectedIds.size}</strong> document\n              {selectedIds.size === 1 ? '' : 's'}?\n            </p>\n            <p>\n              Discarding changes reverts changes made to any drafts of the\n              selected documents and restores the currently published versions.\n            </p>\n            <p>\n              You can use the{' '}\n              <a\n                href=\"https://www.sanity.io/docs/history-experience\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                document history\n              </a>{' '}\n              of each individual document to track these changes.\n            </p>\n          </div>\n        </Dialog>\n      )}\n\n      {dialogMode === 'unpublish' && (\n        <Dialog\n          id={dialogId}\n          header={<>Unpublish Documents</>}\n          zOffset={100000}\n          footer={\n            <div className={styles.footer}>\n              <Button\n                text=\"Cancel\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={() => setDialogMode(null)}\n              />\n              <Button\n                text=\"Unpublish Documents\"\n                tone=\"critical\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={handleUnpublish}\n              />\n            </div>\n          }\n          onClose={() => setDialogMode(null)}\n        >\n          <div className={styles.content}>\n            <p>\n              Are you sure you want to unpublish{' '}\n              <strong>{selectedIds.size}</strong> document\n              {selectedIds.size === 1 ? '' : 's'}?\n            </p>\n            <p>\n              If you unpublish a document, it will no longer be available to the\n              public. Its contents will be moved into a draft if a draft does\n              not already exist. From there you can continue to author the\n              document and re-publish it later.\n            </p>\n            <p>\n              You can use the{' '}\n              <a\n                href=\"https://www.sanity.io/docs/history-experience\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                document history\n              </a>{' '}\n              of each individual document to track these changes.\n            </p>\n          </div>\n        </Dialog>\n      )}\n\n      {dialogMode === 'publish' && (\n        <Dialog\n          id={dialogId}\n          header={<>Publish Documents</>}\n          zOffset={100000}\n          footer={\n            <div className={styles.footer}>\n              <Button\n                text=\"Cancel\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={() => setDialogMode(null)}\n              />\n              <Button\n                text=\"Publish Documents\"\n                tone=\"positive\"\n                disabled={loading}\n                onClick={handlePublish}\n              />\n            </div>\n          }\n          onClose={() => setDialogMode(null)}\n        >\n          <div className={styles.content}>\n            <p>\n              Are you sure you want to publish{' '}\n              <strong>{selectedIds.size}</strong> document\n              {selectedIds.size === 1 ? '' : 's'}?\n            </p>\n            <p>\n              Publishing a document makes the current contents of each document\n              publicly available.\n            </p>\n            <p>\n              You can use the{' '}\n              <a\n                href=\"https://www.sanity.io/docs/history-experience\"\n                target=\"_blank\"\n                rel=\"noreferrer noopener\"\n              >\n                document history\n              </a>{' '}\n              of each individual document to track these changes.\n            </p>\n          </div>\n        </Dialog>\n      )}\n\n      {dialogMode === 'delete' && (\n        <Dialog\n          id={dialogId}\n          header={<>Delete Documents</>}\n          zOffset={100000}\n          footer={\n            <div className={styles.footer}>\n              <Button\n                text=\"Cancel\"\n                mode=\"ghost\"\n                disabled={loading}\n                onClick={() => setDialogMode(null)}\n              />\n              <Button\n                text=\"Delete Documents\"\n                tone=\"critical\"\n                disabled={loading}\n                onClick={handleDelete}\n              />\n            </div>\n          }\n          onClose={() => setDialogMode(null)}\n        >\n          <div className={styles.content}>\n            <p>\n              Are you sure you want to delete{' '}\n              <strong>{selectedIds.size}</strong> document\n              {selectedIds.size === 1 ? '' : 's'}?\n            </p>\n            <p>\n              Deleting a document makes it no longer available to the public as\n              well as removing any draft versions of it.\n            </p>\n            <p>\n              <strong>Note:</strong> in order to delete a document, it must not\n              be referenced by any other document. You may have to remove those\n              references first.\n            </p>\n          </div>\n        </Dialog>\n      )}\n    </>\n  );\n}\n\nexport default BulkActionsMenu;\n","function createEmitter() {\n  type Listener = () => void;\n  const listeners = new Set<Listener>();\n\n  function subscribe(listener: Listener) {\n    listeners.add(listener);\n\n    const unsubscribe = () => {\n      listeners.delete(listener);\n    };\n\n    return unsubscribe;\n  }\n\n  function notify() {\n    for (const listener of listeners) {\n      listener();\n    }\n  }\n\n  return { subscribe, notify };\n}\n\nexport default createEmitter;\n","import _client from 'part:@sanity/base/client';\nconst client = _client as import('@sanity/client').SanityClient;\nexport default client;\n","import { useState, useEffect, useCallback } from 'react';\nimport { debounceTime, tap } from 'rxjs/operators';\nimport { nanoid } from 'nanoid';\nimport client from './client';\n\nexport interface Cursor {\n  results: any[];\n  nextPage: () => Promise<Cursor>;\n  previousPage: () => Promise<Cursor>;\n  totalPages: number;\n  page: number;\n}\n\nconst removeDraftPrefix = (s: string) =>\n  s.startsWith('drafts.') ? s.substring('drafts.'.length) : s;\n\ninterface Params {\n  typeName: string;\n  pageSize: number;\n  selectedColumns: Set<string>;\n}\n\nfunction usePaginatedClient({ typeName, pageSize, selectedColumns }: Params) {\n  // the loading statuses are a set of strings\n  // when it's empty, nothing is loading\n  const [loadingStatuses, setLoadingStatuses] = useState(new Set<string>());\n  const loading = loadingStatuses.size > 0;\n\n  // stores the state for the total amount of de-duped documents\n  const [total, setTotal] = useState(0);\n\n  // uses the pageSize to calculate the total pages\n  const totalPages = Math.ceil(total / pageSize);\n\n  // stores the current set of active IDs on the page.\n  // these are fed into the `useEffect` that creates the `results` state\n  const [pageIds, setPageIds] = useState<string[]>([]);\n\n  // the current page. changing this will trigger a re-fetch of the `pageIds`\n  const [page, setPage] = useState(0);\n\n  // the current result set\n  const [results, setResults] = useState<any[]>([]);\n\n  // used to force refresh. TODO: consider refactoring this\n  const [refreshId, setRefreshId] = useState(nanoid());\n  const refresh = useCallback(() => setRefreshId(nanoid()), []);\n\n  // get total count\n  useEffect(() => {\n    let canceled = false;\n\n    async function getTotalCount() {\n      // add the `total_count` to the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.add('total_count');\n        return next;\n      });\n\n      // fetch all the draft IDs in this document type\n      const draftIds = await client.fetch<string[]>(\n        `*[_type == $typeName && _id in path(\"drafts.**\")]._id`,\n        { typeName },\n      );\n\n      const { draftsWithPublishedVersion, notDraftCount } = await client.fetch<{\n        // find all the documents with a corresponding published version\n        draftsWithPublishedVersion: string[];\n        // and also grab a count of how many documents aren't drafts\n        notDraftCount: number;\n      }>(\n        `{\n          \"draftsWithPublishedVersion\": *[_type == $typeName && _id in $ids]._id,\n          \"notDraftCount\": count(*[_type == $typeName && !(_id in path(\"drafts.**\"))]),\n        }`,\n        { ids: draftIds.map(removeDraftPrefix), typeName },\n      );\n\n      // the calculation for the total is then:\n      const total =\n        draftIds.length - draftsWithPublishedVersion.length + notDraftCount;\n\n      // early return on canceled\n      if (canceled) return;\n\n      // remove `total_count` from the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.delete('total_count');\n        return next;\n      });\n\n      setTotal(total);\n    }\n\n    getTotalCount().catch((e) => {\n      // TODO: proper error handling\n      console.warn(e);\n    });\n\n    return () => {\n      canceled = true;\n    };\n  }, [typeName, refreshId]);\n\n  // get page IDs\n  useEffect(() => {\n    const getPageIds = async (targetPage: number) => {\n      // add the `page_ids` to the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.add('page_ids');\n        return next;\n      });\n\n      // query for all the draft IDs\n      const draftIds = await client.fetch<string[]>(\n        '*[_type == $typeName && _id in path(\"drafts.**\")]._id',\n        { typeName },\n      );\n\n      // create a set of drafts IDs.\n      // these IDs are used to determine whether or a not a published version\n      // should be ignored in order to favor the current draft version\n      const drafts = draftIds.reduce((set, next) => {\n        set.add(removeDraftPrefix(next));\n        return set;\n      }, new Set<string>());\n\n      // this is a recursive function that will call itself until it reaches the\n      // desired page.\n      //\n      // TODO: this implementation gets slower with each new page. pagination\n      // is relatively challenging in this context since there could or could\n      // not be a draft. The published version should be ignored to prefer the\n      // draft which makes it hard to know where the current page ends and the\n      // next one begins\n      const getPage = async (start = 0, page = 0): Promise<string[]> => {\n        const end =\n          start +\n          // note: we fetch twice the given page size to consider the cases\n          // where we have to remove half the result set in the case of\n          // duplicate `draft.` document\n          pageSize * 2;\n        const pageIds = await client.fetch<string[]>(\n          '*[_type == $typeName][$start...$end]._id',\n          { typeName, start, end },\n        );\n\n        const filteredIds = pageIds\n          .map((id, index) => ({ id, index: start + index }))\n          .filter(({ id }) => {\n            // if the id is a draft ID, we want to keep it\n            if (id.startsWith('drafts.')) return true;\n\n            // if the published _id exists in `drafts`, then there exists a draft\n            // version of the current document and we should prefer that over the\n            // published version\n            if (drafts.has(id)) return false;\n\n            return true;\n          })\n          .slice(0, pageSize);\n\n        const ids = filteredIds.map((i) => i.id).map(removeDraftPrefix);\n        if (page >= targetPage) return ids;\n\n        const last = filteredIds[filteredIds.length - 1];\n        if (!last) return [];\n\n        return await getPage(last.index + 1, page + 1);\n      };\n\n      const ids = await getPage();\n\n      // delete the `page_ids` from the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.delete('page_ids');\n        return next;\n      });\n\n      return ids;\n    };\n\n    getPageIds(page)\n      .then(setPageIds)\n      .catch((e) => {\n        // TODO: proper error handling\n        console.warn(e);\n      });\n  }, [page, pageSize, typeName, refreshId]);\n\n  // get results\n  useEffect(() => {\n    // take all the input IDs and duplicate them with the prefix `drafts.`\n    const ids = pageIds.map((id) => [id, `drafts.${id}`]).flat();\n    // these IDs will go into a specific query. if the draft or published\n    // version happens to not exist, that's okay.\n    const query = `*[_id in $ids] { _id, _type, ${Array.from(\n      selectedColumns,\n    ).join(', ')} }`;\n\n    async function getResults() {\n      // add the `results` to the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.add('results');\n        return next;\n      });\n\n      // create a dictionary of indexes where the keys are the IDs and the\n      // values are the current index. this dictionary will be used to sort the\n      // documents in their original order\n      const indexes = pageIds.reduce<{ [id: string]: number }>(\n        (acc, id, index) => {\n          acc[id] = index;\n          return acc;\n        },\n        {},\n      );\n\n      const results = await client.fetch<any[]>(query, { ids });\n\n      // reduce the results into an accumulator by their normalized ID.\n      // if there is a draft version, prefer the draft over the published\n      const reducedResults = Object.values(\n        results.reduce<{ [id: string]: any }>((acc, next) => {\n          const id = removeDraftPrefix(next._id);\n          const current = acc[id];\n\n          const currentIsDraft = current?._id.startsWith('drafts.');\n          const nextIsDraft = next?._id.startsWith('drafts.');\n\n          const status =\n            current && next\n              ? 'draft'\n              : currentIsDraft || nextIsDraft\n              ? 'unpublished'\n              : 'published';\n\n          acc[id] = currentIsDraft ? current : next;\n          acc[id]._status = status;\n          acc[id]._normalizedId = id;\n\n          return acc;\n        }, {}),\n      );\n\n      // delete the `results` from the loading statuses\n      setLoadingStatuses((prev) => {\n        const next = new Set(prev);\n        next.delete('results');\n        return next;\n      });\n\n      setResults(\n        reducedResults\n          .slice()\n          // sort the accumulated version by their original index\n          .sort(\n            (a, b) =>\n              indexes[removeDraftPrefix(a._id)] -\n              indexes[removeDraftPrefix(b._id)],\n          ),\n      );\n    }\n\n    // TODO: consider error handling\n    getResults().catch((e) => {\n      console.warn(e);\n    });\n\n    // TODO: add error handler\n    const subscription = client\n      .listen(query, { ids })\n      .pipe(\n        tap(() => {\n          // add the `results` to the loading statuses\n          setLoadingStatuses((prev) => {\n            const next = new Set(prev);\n            next.add('results');\n            return next;\n          });\n        }),\n        debounceTime(1000),\n      )\n      .subscribe(getResults);\n\n    return () => subscription.unsubscribe();\n  }, [pageIds, selectedColumns, refreshId]);\n\n  // reset page\n  useEffect(() => {\n    // if the page is greater than the total pages then reset the page.\n    // this could occur if the page size changed\n    if (page >= totalPages) {\n      setPage(0);\n    }\n  }, [page, totalPages]);\n\n  return {\n    results,\n    page,\n    totalPages,\n    setPage,\n    loading,\n    pageIds,\n    total,\n    refresh,\n  };\n}\n\nexport default usePaginatedClient;\n","import React, { useMemo, useState, useEffect } from 'react';\nimport { Dialog, Checkbox, Button } from '@sanity/ui';\nimport { nanoid } from 'nanoid';\nimport schema from 'part:@sanity/base/schema';\nimport styles from './styles.module.css';\n\ninterface Props {\n  typeName: string;\n  open: boolean;\n  onClose: () => void;\n  onSelect: (selectedColumns: Set<string>) => void;\n  initiallySelectedColumns: Set<string>;\n}\n\nfunction ColumnSelector({\n  open,\n  onClose,\n  onSelect,\n  typeName,\n  initiallySelectedColumns,\n}: Props) {\n  const schemaType = schema.get(typeName);\n  const [selectedColumns, setSelectedColumns] = useState(\n    initiallySelectedColumns,\n  );\n\n  useEffect(() => {\n    if (open) {\n      setSelectedColumns(initiallySelectedColumns);\n    }\n  }, [open, initiallySelectedColumns]);\n\n  const dialogId = useMemo(() => nanoid(), []);\n  if (!open) {\n    return null;\n  }\n\n  return (\n    <Dialog\n      className={styles.dialog}\n      header={<>Select Columns</>}\n      footer={\n        <div className={styles.footer}>\n          <Button mode=\"ghost\" text=\"Cancel\" onClick={onClose} />\n          <Button\n            tone=\"primary\"\n            text=\"Apply\"\n            onClick={() => {\n              onClose();\n              onSelect(selectedColumns);\n            }}\n          />\n        </div>\n      }\n      id={dialogId}\n      onClose={onClose}\n      zOffset={100000}\n    >\n      <ul className={styles.list}>\n        <li>\n          <label className={styles.label}>\n            <Checkbox\n              className={styles.checkbox}\n              checked={selectedColumns.has('_updatedAt')}\n              onChange={() => {\n                setSelectedColumns((set) => {\n                  const nextSet = new Set(set);\n\n                  if (set.has('_updatedAt')) {\n                    nextSet.delete('_updatedAt');\n                  } else {\n                    nextSet.add('_updatedAt');\n                  }\n\n                  return nextSet;\n                });\n              }}\n            />\n            <span>Updated At</span>\n          </label>\n        </li>\n        {schemaType.fields.map((i: any) => {\n          const fieldName: string = i.name;\n          const title: string = i.type.title;\n\n          return (\n            <li key={fieldName}>\n              <label className={styles.label}>\n                <Checkbox\n                  className={styles.checkbox}\n                  checked={selectedColumns.has(fieldName)}\n                  onChange={() => {\n                    setSelectedColumns((set) => {\n                      const nextSet = new Set(set);\n\n                      if (set.has(fieldName)) {\n                        nextSet.delete(fieldName);\n                      } else {\n                        nextSet.add(fieldName);\n                      }\n\n                      return nextSet;\n                    });\n                  }}\n                />\n                <span>{title}</span>\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </Dialog>\n  );\n}\n\nexport default ColumnSelector;\n","/**\n * Converts portable text to strings.\n *\n * Copied and pasted from:\n * https://www.sanity.io/docs/presenting-block-text#plain-text-serialization-ac67a867dd69\n */\nfunction blockContentToString(blocks: any[] = []) {\n  return (\n    blocks\n      // loop through each block\n      .map((block) => {\n        // if it's not a text block with children,\n        // return nothing\n        if (block._type !== 'block' || !block.children) {\n          return '';\n        }\n\n        // loop through the children spans, and join the\n        // text strings\n        return block.children.map((child: any) => child.text).join('');\n      })\n      // join the paragraphs leaving split by two linebreaks\n      .join('\\n\\n')\n  );\n}\n\nexport default blockContentToString;\n","import React from 'react';\nimport SanityPreview from 'part:@sanity/base/preview';\nimport blockContentToString from '../block-content-to-string';\nimport styles from './styles.module.css';\n\ninterface Props {\n  field: any;\n  value: any;\n}\n\nfunction Cell({ field, value }: Props) {\n  switch (field.type.name) {\n    case 'string':\n    case 'number': {\n      return <td key={field.name}>{value}</td>;\n    }\n    case 'blockContent': {\n      const blockContentAsString = blockContentToString(value);\n\n      return (\n        <td\n          title={blockContentAsString}\n          key={field.name}\n          className={styles.blockContent}\n        >\n          {blockContentAsString}\n        </td>\n      );\n    }\n    case 'datetime': {\n      return (\n        <td key={field.name}>\n          {value ? new Date(value).toLocaleString() : ''}\n        </td>\n      );\n    }\n    case 'date': {\n      return (\n        <td key={field.name}>\n          {value ? new Date(value).toLocaleDateString() : ''}\n        </td>\n      );\n    }\n    case 'array': {\n      return (\n        <td key={field.name}>\n          {value?.length || 0} item\n          {value?.length === 1 ? '' : 's'}\n        </td>\n      );\n    }\n    default: {\n      return (\n        <td key={field.name}>\n          <SanityPreview type={field.type} layout=\"default\" value={value} />\n        </td>\n      );\n    }\n  }\n}\n\nexport default Cell;\n","import React, { useEffect, useState, useRef } from 'react';\nimport useRouter, { RouterProvider } from './use-router';\nimport classNames from 'classnames';\nimport schema from 'part:@sanity/base/schema';\nimport SanityPreview from 'part:@sanity/base/preview';\nimport BulkActionsMenu from './bulk-actions-menu';\nimport createEmitter from './create-emitter';\nimport usePaginatedClient from './use-paginated-client';\nimport ColumnSelector from './column-selector';\nimport Cell from './cell';\nimport {\n  Label,\n  Button,\n  Select,\n  MenuButton,\n  Menu,\n  MenuItem,\n  Checkbox,\n  Badge,\n} from '@sanity/ui';\nimport {\n  EllipsisVerticalIcon,\n  ArrowRightIcon,\n  ChevronLeftIcon,\n  ChevronRightIcon,\n  SyncIcon,\n  SpinnerIcon,\n  ControlsIcon,\n} from '@sanity/icons';\nimport styles from './styles.module.css';\n\nfunction parentHasClass(el: HTMLElement | null, className: string): boolean {\n  if (!el) return false;\n  if (el.classList.contains(className)) return true;\n  return parentHasClass(el.parentElement, className);\n}\n\nfunction createSuperPane(typeName: string, S: any) {\n  const schemaType = schema.get(typeName);\n  const selectColumns = createEmitter();\n  const refresh = createEmitter();\n\n  function SuperPane() {\n    const router = useRouter();\n    const [pageSize, setPageSize] = useState(25);\n    const [columnSelectorOpen, setColumnSelectorOpen] = useState(false);\n    const [selectedColumns, setSelectedColumns] = useState(new Set<string>());\n    const [selectedIds, setSelectedIds] = useState(new Set<string>());\n\n    const containerRef = useRef<HTMLDivElement>(null);\n\n    const client = usePaginatedClient({\n      typeName,\n      pageSize,\n      selectedColumns,\n    });\n\n    useEffect(() => {\n      return selectColumns.subscribe(() => setColumnSelectorOpen(true));\n    }, []);\n\n    useEffect(() => {\n      return refresh.subscribe(client.refresh);\n    }, [client.refresh]);\n\n    const fields = schemaType.fields.filter((field: any) =>\n      selectedColumns.has(field.name),\n    );\n\n    const atLeastOneSelected = client.results.some((i) =>\n      selectedIds.has(i._normalizedId),\n    );\n    const allSelected = client.results.every((i) =>\n      selectedIds.has(i._normalizedId),\n    );\n\n    return (\n      <>\n        <div ref={containerRef} className={styles.container}>\n          <div\n            className={classNames(styles.bulkInfo, {\n              [styles.bulkInfoRevealed]: selectedIds.size > 0,\n            })}\n          >\n            <div className={styles.bulkInfoContainer}>\n              <Label>\n                {selectedIds.size} item{selectedIds.size === 1 ? '' : 's'}{' '}\n                selected\n              </Label>\n              <button\n                className={styles.clearButton}\n                onClick={() => setSelectedIds(new Set())}\n              >\n                <Label>Clear</Label>\n              </button>\n\n              <BulkActionsMenu\n                className={styles.clearButton}\n                selectedIds={selectedIds}\n                typeName={typeName}\n              />\n            </div>\n          </div>\n\n          <div className={styles.tableWrapper}>\n            <div\n              className={classNames(styles.loadingOverlay, {\n                [styles.loadingOverlayActive]: client.loading,\n              })}\n            >\n              <SpinnerIcon className={styles.loadingSpinner} />\n            </div>\n            <table className={styles.table}>\n              <thead className={styles.thead}>\n                <tr>\n                  <th\n                    className={classNames(styles.checkboxCell, 'prevent-nav')}\n                  >\n                    <input\n                      type=\"checkbox\"\n                      className={styles.hiddenCheckbox}\n                      onChange={() => {\n                        setSelectedIds((set) => {\n                          const nextSet = new Set(set);\n                          if (allSelected) {\n                            for (const result of client.results || []) {\n                              nextSet.delete(result._normalizedId);\n                            }\n                          } else {\n                            for (const result of client.results || []) {\n                              nextSet.add(result._normalizedId);\n                            }\n                          }\n\n                          return nextSet;\n                        });\n                      }}\n                      checked={allSelected}\n                    />\n                    <div aria-hidden=\"true\" className={styles.checkboxFacade}>\n                      <Checkbox\n                        tabIndex={-1}\n                        checked={atLeastOneSelected}\n                        indeterminate={atLeastOneSelected && !allSelected}\n                      />\n                    </div>\n                  </th>\n                  <th>\n                    <Label>{schemaType.title}</Label>\n                  </th>\n                  <th>\n                    <Label>Status</Label>\n                  </th>\n                  {selectedColumns.has('_updatedAt') && (\n                    <th>\n                      <Label>Updated At</Label>\n                    </th>\n                  )}\n                  {fields.map((field: any) => (\n                    <th key={field.name}>\n                      <Label>{field.type.title}</Label>\n                    </th>\n                  ))}\n                  <th className={styles.optionsCell} aria-label=\"Options\" />\n                </tr>\n              </thead>\n\n              <tbody className={styles.tbody}>\n                {client.results.map((item) => {\n                  const handleNavigation = () => {\n                    router.navigateUrl(\n                      router.resolveIntentLink('edit', {\n                        id: item._id,\n                        type: item._type,\n                      }),\n                    );\n                  };\n\n                  return (\n                    <tr\n                      key={item._normalizedId}\n                      onClick={(e) => {\n                        // prevent the menu button from causing a navigation\n                        if (\n                          parentHasClass(e.target as HTMLElement, 'prevent-nav')\n                        ) {\n                          return;\n                        }\n\n                        handleNavigation();\n                      }}\n                    >\n                      <td\n                        className={classNames(\n                          styles.checkboxCell,\n                          'prevent-nav',\n                        )}\n                      >\n                        <input\n                          type=\"checkbox\"\n                          className={styles.hiddenCheckbox}\n                          onChange={(e) => {\n                            setSelectedIds((set) => {\n                              const nextSet = new Set(set);\n\n                              if (e.currentTarget.checked) {\n                                nextSet.add(item._normalizedId);\n                              } else {\n                                nextSet.delete(item._normalizedId);\n                              }\n\n                              return nextSet;\n                            });\n                          }}\n                          checked={selectedIds.has(item._normalizedId)}\n                        />\n                        <div\n                          aria-hidden=\"true\"\n                          className={styles.checkboxFacade}\n                        >\n                          <Checkbox\n                            tabIndex={-1}\n                            checked={selectedIds.has(item._normalizedId)}\n                          />\n                        </div>\n                      </td>\n                      <td className={styles.titleCell}>\n                        <SanityPreview\n                          type={schemaType}\n                          layout=\"default\"\n                          value={item}\n                        />\n                      </td>\n                      <td>\n                        <Badge\n                          size={1}\n                          tone={\n                            item._status === 'published'\n                              ? 'positive'\n                              : item._status === 'unpublished'\n                              ? 'caution'\n                              : 'default'\n                          }\n                        >\n                          {item._status}\n                        </Badge>\n                      </td>\n\n                      {selectedColumns.has('_updatedAt') && (\n                        <td>{new Date(item._updatedAt).toLocaleString()}</td>\n                      )}\n\n                      {fields.map((field: any) => (\n                        <Cell field={field} value={item[field.name]} />\n                      ))}\n\n                      <td className={styles.optionsCell}>\n                        <MenuButton\n                          button={\n                            <Button\n                              className=\"prevent-nav\"\n                              icon={EllipsisVerticalIcon}\n                              title=\"Options\"\n                              mode=\"bleed\"\n                            />\n                          }\n                          portal\n                          id=\"prevent-nav-example\"\n                          menu={\n                            <Menu className={styles.menu}>\n                              <MenuItem\n                                className=\"prevent-nav\"\n                                text=\"Open\"\n                                icon={ArrowRightIcon}\n                                onClick={handleNavigation}\n                              />\n                              {/* TODO */}\n                              {/* <MenuItem\n                                className=\"prevent-nav\"\n                                text=\"Discard changes\"\n                              />\n                              <MenuItem\n                                className=\"prevent-nav\"\n                                text=\"Unpublish\"\n                              />\n                              <MenuDivider />\n                              <MenuItem\n                                className=\"prevent-nav\"\n                                tone=\"critical\"\n                                icon={TrashIcon}\n                                text=\"Delete\"\n                              /> */}\n                            </Menu>\n                          }\n                          placement=\"left\"\n                        />\n                      </td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n\n          <div className={styles.footer}>\n            <label className={styles.selectLabel}>\n              <Label>Rows Per Page</Label>\n              <div className={styles.select}>\n                <Select\n                  value={pageSize}\n                  onChange={(e) =>\n                    setPageSize(parseInt(e.currentTarget.value, 10))\n                  }\n                >\n                  <option value={25}>25</option>\n                  <option value={50}>50</option>\n                  <option value={100}>100</option>\n                </Select>\n              </div>\n            </label>\n            <Button\n              fontSize={1}\n              disabled={client.page === 0}\n              onClick={() => client.setPage(client.page - 1)}\n              icon={ChevronLeftIcon}\n              title=\"Previous page\"\n              mode=\"bleed\"\n            />\n            <Label>\n              {client.page + 1}&nbsp;/&nbsp;{client.totalPages}\n            </Label>\n            <Button\n              fontSize={1}\n              disabled={client.page >= client.totalPages - 1}\n              onClick={() => client.setPage(client.page + 1)}\n              icon={ChevronRightIcon}\n              title=\"Next Page\"\n              mode=\"bleed\"\n            />\n          </div>\n        </div>\n\n        <ColumnSelector\n          open={columnSelectorOpen}\n          onClose={() => setColumnSelectorOpen(false)}\n          typeName={typeName}\n          initiallySelectedColumns={selectedColumns}\n          onSelect={setSelectedColumns}\n        />\n      </>\n    );\n  }\n\n  function SuperPaneWrapper() {\n    return (\n      <RouterProvider>\n        <SuperPane />\n      </RouterProvider>\n    );\n  }\n\n  return Object.assign(S.documentTypeList(typeName).serialize(), {\n    type: 'component',\n    component: SuperPaneWrapper,\n    menuItems: S.documentTypeList(typeName)\n      .menuItems([\n        S.menuItem().title('Refresh').icon(SyncIcon).action(refresh.notify),\n        S.menuItem()\n          .title('Select Columns')\n          .icon(ControlsIcon)\n          .action(selectColumns.notify),\n      ])\n      .serialize().menuItems,\n  });\n}\n\nexport default createSuperPane;\n"],"names":["RouterContext","createContext","internalRouterContextTypeCheck","context","propName","componentName","__internalRouter","Error","RouterProvider","React","Component","render","router","props","children","useRouter","useContext","styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","client","_client","ErroredDocuments","e","schemaType","idsWithErrors","details","items","map","item","error","id","length","plural","_id","_type","removeDraftPrefix","s","startsWith","substring","BulkActionsMenu","className","selectedIds","typeName","buttonId","useMemo","nanoid","schema","get","toast","useToast","dialogId","dialogMode","setDialogMode","useState","loading","setLoading","handleDiscardChanges","ids","fetch","Array","from","flat","idSet","reduce","set","add","Set","draftIdsThatAlsoHavePublishedIds","filter","has","t","transaction","delete","commit","console","warn","push","title","description","status","closable","duration","handleUnpublish","publishedDocuments","publishedDocument","createIfNotExists","_updatedAt","Date","toISOString","handlePublish","draftDocuments","draftDocument","createOrReplace","handleDelete","idsToDelete","textAlign","ResetIcon","UnpublishIcon","PublishIcon","TrashIcon","styles","footer","content","size","createEmitter","listeners","subscribe","listener","unsubscribe","notify","usePaginatedClient","pageSize","selectedColumns","loadingStatuses","setLoadingStatuses","total","setTotal","totalPages","Math","ceil","pageIds","setPageIds","page","setPage","results","setResults","refreshId","setRefreshId","refresh","useCallback","useEffect","canceled","getTotalCount","prev","next","draftIds","draftsWithPublishedVersion","notDraftCount","catch","getPageIds","targetPage","drafts","getPage","start","end","filteredIds","index","slice","i","last","then","query","join","getResults","indexes","acc","reducedResults","Object","values","current","currentIsDraft","nextIsDraft","_status","_normalizedId","sort","a","b","subscription","listen","pipe","tap","debounceTime","ColumnSelector","open","onClose","onSelect","initiallySelectedColumns","setSelectedColumns","dialog","list","label","checkbox","nextSet","fields","fieldName","name","blockContentToString","blocks","block","child","text","Cell","field","value","blockContentAsString","blockContent","toLocaleString","toLocaleDateString","parentHasClass","el","classList","contains","parentElement","createSuperPane","S","selectColumns","SuperPane","setPageSize","columnSelectorOpen","setColumnSelectorOpen","setSelectedIds","containerRef","useRef","atLeastOneSelected","some","allSelected","every","container","classNames","bulkInfo","bulkInfoRevealed","bulkInfoContainer","clearButton","tableWrapper","loadingOverlay","loadingOverlayActive","loadingSpinner","table","thead","checkboxCell","hiddenCheckbox","result","checkboxFacade","optionsCell","tbody","handleNavigation","navigateUrl","resolveIntentLink","target","currentTarget","checked","titleCell","EllipsisVerticalIcon","menu","ArrowRightIcon","selectLabel","select","parseInt","ChevronLeftIcon","ChevronRightIcon","SuperPaneWrapper","assign","documentTypeList","serialize","component","menuItems","menuItem","icon","SyncIcon","action","ControlsIcon"],"mappings":"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"}